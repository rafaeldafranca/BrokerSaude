// <auto-generated />
using System;
using BrokerService.Core.Data.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BrokerService.Core.Migrations
{
    [DbContext(typeof(AplicacaoContext))]
    partial class AplicacaoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("BrokerService.Domain.Entities.Associado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataAlteracao")
                        .IsUnicode(false)
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("DataCriacao")
                        .IsUnicode(false)
                        .HasColumnType("DateTime");

                    b.Property<string>("Matricula")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("UsuarioId")
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Associados", (string)null);
                });

            modelBuilder.Entity("BrokerService.Domain.Entities.Conveniado", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataAlteracao")
                        .IsUnicode(false)
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("DataCriacao")
                        .IsUnicode(false)
                        .HasColumnType("DateTime");

                    b.Property<Guid>("PlanoId")
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioId")
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlanoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Conveniados", (string)null);
                });

            modelBuilder.Entity("BrokerService.Domain.Entities.Especialidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataAlteracao")
                        .IsUnicode(false)
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("DataCriacao")
                        .IsUnicode(false)
                        .HasColumnType("DateTime");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Especialidades", (string)null);
                });

            modelBuilder.Entity("BrokerService.Domain.Entities.Manifestacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("DataAlteracao")
                        .IsUnicode(false)
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("DataCriacao")
                        .IsUnicode(false)
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("DataFechamento")
                        .IsUnicode(false)
                        .HasColumnType("DateTime");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("StatusSolicitacao")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("UsuarioId")
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Manifestacoes", (string)null);
                });

            modelBuilder.Entity("BrokerService.Domain.Entities.ManifestacaoResposta", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DataAlteracao")
                        .IsUnicode(false)
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("DataCriacao")
                        .IsUnicode(false)
                        .HasColumnType("DateTime");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("ManifestacaoId")
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioId")
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ManifestacaoId");

                    b.ToTable("ManifestacaoResposta", (string)null);
                });

            modelBuilder.Entity("BrokerService.Domain.Entities.Plano", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Acomodacao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Cns")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Cobertura")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("DataAlteracao")
                        .IsUnicode(false)
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("DataCriacao")
                        .IsUnicode(false)
                        .HasColumnType("DateTime");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Produto")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Planos", (string)null);
                });

            modelBuilder.Entity("BrokerService.Domain.Entities.Prestador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Conselho")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("DataAlteracao")
                        .IsUnicode(false)
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("DataCriacao")
                        .IsUnicode(false)
                        .HasColumnType("DateTime");

                    b.Property<Guid>("EspecialidadeId")
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioId")
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EspecialidadeId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Prestadores", (string)null);
                });

            modelBuilder.Entity("BrokerService.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Ativo")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Cep")
                        .IsRequired()
                        .HasMaxLength(8)
                        .IsUnicode(false)
                        .HasColumnType("varchar(8)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("DataAlteracao")
                        .IsUnicode(false)
                        .HasColumnType("DateTime");

                    b.Property<DateTime>("DataCriacao")
                        .IsUnicode(false)
                        .HasColumnType("DateTime");

                    b.Property<DateTime?>("DataUltimoAcesso")
                        .IsUnicode(false)
                        .HasColumnType("DateTime");

                    b.Property<string>("Documento")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Pais")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Senha")
                        .IsRequired()
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<int>("Tipo")
                        .IsUnicode(false)
                        .HasColumnType("int");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("UsuarioId")
                        .IsUnicode(false)
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Validado")
                        .IsUnicode(false)
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("BrokerService.Domain.Entities.Associado", b =>
                {
                    b.HasOne("BrokerService.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Associados")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BrokerService.Domain.Entities.Conveniado", b =>
                {
                    b.HasOne("BrokerService.Domain.Entities.Plano", "Plano")
                        .WithMany("Conveniados")
                        .HasForeignKey("PlanoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrokerService.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Conveniados")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Plano");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BrokerService.Domain.Entities.Manifestacao", b =>
                {
                    b.HasOne("BrokerService.Domain.Entities.Usuario", null)
                        .WithMany("Manifestacoes")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BrokerService.Domain.Entities.ManifestacaoResposta", b =>
                {
                    b.HasOne("BrokerService.Domain.Entities.Manifestacao", null)
                        .WithMany("ManifestacaoRespostas")
                        .HasForeignKey("ManifestacaoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("BrokerService.Domain.Entities.Prestador", b =>
                {
                    b.HasOne("BrokerService.Domain.Entities.Especialidade", "Especialidade")
                        .WithMany()
                        .HasForeignKey("EspecialidadeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("BrokerService.Domain.Entities.Usuario", "Usuario")
                        .WithMany("Prestadores")
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Especialidade");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("BrokerService.Domain.Entities.Manifestacao", b =>
                {
                    b.Navigation("ManifestacaoRespostas");
                });

            modelBuilder.Entity("BrokerService.Domain.Entities.Plano", b =>
                {
                    b.Navigation("Conveniados");
                });

            modelBuilder.Entity("BrokerService.Domain.Entities.Usuario", b =>
                {
                    b.Navigation("Associados");

                    b.Navigation("Conveniados");

                    b.Navigation("Manifestacoes");

                    b.Navigation("Prestadores");
                });
#pragma warning restore 612, 618
        }
    }
}
